version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: archivist-postgres
    environment:
      POSTGRES_DB: archivist
      POSTGRES_USER: archivist
      POSTGRES_PASSWORD: pTwef35YjQ98
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - archivist-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U archivist"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching and queue management
  redis:
    image: redis:7-alpine
    container_name: archivist-redis
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - archivist-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Celery Worker for background tasks
  celery-worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: archivist-celery-worker
    command: celery -A core.tasks worker --loglevel=info --concurrency=4
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=archivist
      - POSTGRES_USER=archivist
      - POSTGRES_PASSWORD=pTwef35YjQ98
      - PYTHONPATH=/opt/Archivist
    volumes:
      - ./:/opt/Archivist
      - vod_storage:/mnt/vod
    depends_on:
      - redis
      - postgres
    networks:
      - archivist-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G

  # Celery Beat for scheduled tasks
  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: archivist-celery-beat
    command: celery -A core.tasks beat --loglevel=info
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=archivist
      - POSTGRES_USER=archivist
      - POSTGRES_PASSWORD=pTwef35YjQ98
      - PYTHONPATH=/opt/Archivist
    volumes:
      - ./:/opt/Archivist
    depends_on:
      - redis
      - postgres
    networks:
      - archivist-network
    restart: unless-stopped

  # Flask API and Dashboard
  dashboard:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: archivist-dashboard
    command: gunicorn --bind 0.0.0.0:8080 --workers 4 --worker-class gevent --worker-connections 1000 --timeout 120 --keep-alive 5 --max-requests 1000 --max-requests-jitter 100 core.monitoring.integrated_dashboard:start_integrated_dashboard
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=archivist
      - POSTGRES_USER=archivist
      - POSTGRES_PASSWORD=pTwef35YjQ98
      - DASHBOARD_SECRET_KEY=${DASHBOARD_SECRET_KEY:-archivist-dashboard-secret-2025}
      - PYTHONPATH=/opt/Archivist
    ports:
      - "8080:8080"
      - "5051:5051"
    volumes:
      - ./:/opt/Archivist
      - vod_storage:/mnt/vod
    depends_on:
      - redis
      - postgres
      - celery-worker
    networks:
      - archivist-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: archivist-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/ssl:/etc/nginx/ssl
      - ./docker/nginx/conf.d:/etc/nginx/conf.d
    depends_on:
      - dashboard
    networks:
      - archivist-network
    restart: unless-stopped

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: archivist-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - archivist-network
    restart: unless-stopped

  # Grafana for metrics visualization
  grafana:
    image: grafana/grafana:latest
    container_name: archivist-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning
      - ./docker/grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - prometheus
    networks:
      - archivist-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  vod_storage:
    driver: local

networks:
  archivist-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 