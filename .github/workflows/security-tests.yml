name: Security Tests and CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  security-tests:
    runs-on: ubuntu-latest
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: archivist_password
          POSTGRES_DB: archivist
          POSTGRES_USER: archivist
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          libpq-dev \
          libmagic1 \
          curl
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements/security.txt
        pip install pytest pytest-cov pytest-mock
    
    - name: Set up environment variables
      run: |
        echo "DATABASE_URL=postgresql://archivist:archivist_password@localhost:5432/archivist" >> $GITHUB_ENV
        echo "REDIS_URL=redis://localhost:6379/0" >> $GITHUB_ENV
        echo "SECRET_KEY=test-secret-key-for-ci" >> $GITHUB_ENV
        echo "FLASK_ENV=testing" >> $GITHUB_ENV
        echo "TESTING=true" >> $GITHUB_ENV
        echo "WTF_CSRF_ENABLED=true" >> $GITHUB_ENV
        echo "SESSION_COOKIE_SECURE=false" >> $GITHUB_ENV
    
    - name: Wait for services
      run: |
        # Wait for PostgreSQL
        until pg_isready -h localhost -p 5432 -U archivist; do
          echo "Waiting for PostgreSQL..."
          sleep 2
        done
        
        # Wait for Redis
        until redis-cli -h localhost ping; do
          echo "Waiting for Redis..."
          sleep 2
        done
    
    - name: Run security tests
      run: |
        python -m pytest tests/test_security.py -v --cov=core.security --cov-report=xml
    
    - name: Run all tests
      run: |
        python -m pytest tests/ -v --cov=core --cov-report=xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install security scanning tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
    
    - name: Run Bandit security scan
      run: |
        bandit -r core/ -f json -o bandit-report.json || true
    
    - name: Run Safety dependency scan
      run: |
        safety check --json --output safety-report.json || true
    
    - name: Upload security scan results
      uses: actions/upload-artifact@v3
      with:
        name: security-scan-results
        path: |
          bandit-report.json
          safety-report.json

  dependency-check:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install pip-audit
      run: |
        python -m pip install --upgrade pip
        pip install pip-audit
    
    - name: Run pip-audit
      run: |
        pip-audit --format json --output pip-audit-report.json || true
    
    - name: Upload dependency audit results
      uses: actions/upload-artifact@v3
      with:
        name: dependency-audit-results
        path: pip-audit-report.json

  lint-and-format:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install linting tools
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy
    
    - name: Run Black code formatter
      run: |
        black --check --diff core/ tests/
    
    - name: Run isort import sorting
      run: |
        isort --check-only --diff core/ tests/
    
    - name: Run Flake8 linting
      run: |
        flake8 core/ tests/ --max-line-length=88 --extend-ignore=E203,W503
    
    - name: Run MyPy type checking
      run: |
        mypy core/ --ignore-missing-imports --no-strict-optional

  integration-tests:
    runs-on: ubuntu-latest
    needs: [security-tests]
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
      
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: archivist_password
          POSTGRES_DB: archivist
          POSTGRES_USER: archivist
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements/security.txt
        pip install pytest pytest-cov
    
    - name: Set up environment
      run: |
        echo "DATABASE_URL=postgresql://archivist:archivist_password@localhost:5432/archivist" >> $GITHUB_ENV
        echo "REDIS_URL=redis://localhost:6379/0" >> $GITHUB_ENV
        echo "SECRET_KEY=test-secret-key-for-integration" >> $GITHUB_ENV
        echo "FLASK_ENV=testing" >> $GITHUB_ENV
    
    - name: Run integration tests
      run: |
        python -m pytest tests/ -m "integration" -v --cov=core --cov-report=xml

  security-compliance:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Security compliance check
      run: |
        echo "Checking security compliance..."
        
        # Check for security headers in code
        if grep -r "X-Content-Type-Options" core/; then
          echo "‚úÖ Security headers found"
        else
          echo "‚ùå Security headers missing"
          exit 1
        fi
        
        # Check for CSRF protection
        if grep -r "CSRFProtect" core/; then
          echo "‚úÖ CSRF protection found"
        else
          echo "‚ùå CSRF protection missing"
          exit 1
        fi
        
        # Check for input validation
        if grep -r "validate_path" core/; then
          echo "‚úÖ Input validation found"
        else
          echo "‚ùå Input validation missing"
          exit 1
        fi
        
        # Check for rate limiting
        if grep -r "Flask-Limiter" requirements.txt; then
          echo "‚úÖ Rate limiting found"
        else
          echo "‚ùå Rate limiting missing"
          exit 1
        fi
        
        echo "üéâ All security compliance checks passed!" 